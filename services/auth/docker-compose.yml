version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: b25-auth-db
    environment:
      POSTGRES_DB: b25_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - b25-network

  # Authentication service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: b25-auth-service
    ports:
      - "9097:9097"
    environment:
      # Server
      PORT: 9097
      NODE_ENV: production

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: b25_auth
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_POOL_MAX: 20

      # JWT Secrets (CHANGE THESE IN PRODUCTION!)
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-development-access-secret-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-development-refresh-secret-change-in-production}
      JWT_ACCESS_EXPIRY: 15m
      JWT_REFRESH_EXPIRY: 7d

      # CORS
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080

      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:9097/health/live', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - b25-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  b25-network:
    driver: bridge
