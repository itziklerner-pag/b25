version: '3.8'

services:
  media-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9097:9097"
    environment:
      - SERVER_PORT=9097
      - SERVER_MODE=development
      - STORAGE_TYPE=s3
      - S3_ENDPOINT=http://minio:9000
      - S3_REGION=us-east-1
      - S3_BUCKET=b25-media
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_USE_SSL=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=b25_media
      - DB_PASSWORD=b25_media_pass
      - DB_NAME=b25_media
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENABLE_VIRUS_SCAN=false
      - QUOTA_ENABLED=true
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - ./config.yaml:/app/config.yaml
      - media-uploads:/tmp/media-uploads
    networks:
      - media-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=b25_media
      - POSTGRES_PASSWORD=b25_media_pass
      - POSTGRES_DB=b25_media
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - media-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U b25_media"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - media-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    networks:
      - media-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Optional: ClamAV for virus scanning
  clamav:
    image: clamav/clamav:latest
    ports:
      - "3310:3310"
    volumes:
      - clamav-data:/var/lib/clamav
    networks:
      - media-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/clamdcheck.sh"]
      interval: 60s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
  redis-data:
  minio-data:
  media-uploads:
  clamav-data:

networks:
  media-network:
    driver: bridge
