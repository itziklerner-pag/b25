name: CI - Build, Test & Docker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  RUST_VERSION: stable

jobs:
  # ============================================
  # Detect Changes
  # ============================================
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      market-data: ${{ steps.filter.outputs.market-data }}
      order-execution: ${{ steps.filter.outputs.order-execution }}
      strategy-engine: ${{ steps.filter.outputs.strategy-engine }}
      account-monitor: ${{ steps.filter.outputs.account-monitor }}
      dashboard-server: ${{ steps.filter.outputs.dashboard-server }}
      risk-manager: ${{ steps.filter.outputs.risk-manager }}
      configuration: ${{ steps.filter.outputs.configuration }}
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
      auth: ${{ steps.filter.outputs.auth }}
      terminal-ui: ${{ steps.filter.outputs.terminal-ui }}
      web-dashboard: ${{ steps.filter.outputs.web-dashboard }}
      shared: ${{ steps.filter.outputs.shared }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            market-data:
              - 'services/market-data/**'
              - 'shared/proto/**'
              - 'shared/lib/rust/**'
            order-execution:
              - 'services/order-execution/**'
              - 'shared/proto/**'
              - 'shared/lib/go/**'
            strategy-engine:
              - 'services/strategy-engine/**'
              - 'shared/proto/**'
              - 'shared/lib/go/**'
              - 'shared/lib/python/**'
            account-monitor:
              - 'services/account-monitor/**'
              - 'shared/proto/**'
              - 'shared/lib/go/**'
            dashboard-server:
              - 'services/dashboard-server/**'
              - 'shared/proto/**'
              - 'shared/lib/go/**'
            risk-manager:
              - 'services/risk-manager/**'
              - 'shared/proto/**'
              - 'shared/lib/go/**'
            configuration:
              - 'services/configuration/**'
              - 'shared/proto/**'
              - 'shared/lib/go/**'
            api-gateway:
              - 'services/api-gateway/**'
              - 'shared/proto/**'
            auth:
              - 'services/auth/**'
            terminal-ui:
              - 'ui/terminal/**'
              - 'shared/proto/**'
              - 'shared/lib/rust/**'
            web-dashboard:
              - 'ui/web/**'
              - 'shared/schemas/**'
            shared:
              - 'shared/**'
            docker:
              - 'docker/**'
              - '**/Dockerfile'

  # ============================================
  # Rust Services
  # ============================================
  test-market-data:
    name: Test - Market Data Service
    needs: changes
    if: needs.changes.outputs.market-data == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: services/market-data
          cache-on-failure: true
      - name: Check formatting
        run: cd services/market-data && cargo fmt -- --check
      - name: Clippy
        run: cd services/market-data && cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cd services/market-data && cargo test --all-features
      - name: Build release
        run: cd services/market-data && cargo build --release

  # ============================================
  # Go Services
  # ============================================
  test-order-execution:
    name: Test - Order Execution Service
    needs: changes
    if: needs.changes.outputs.order-execution == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: services/order-execution/go.sum
      - name: Verify dependencies
        run: cd services/order-execution && go mod verify
      - name: Lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: services/order-execution
      - name: Run tests
        run: cd services/order-execution && go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - name: Build
        run: cd services/order-execution && go build -v -o bin/order-execution ./cmd/server
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: services/order-execution/coverage.out
          flags: order-execution

  test-strategy-engine:
    name: Test - Strategy Engine Service
    needs: changes
    if: needs.changes.outputs.strategy-engine == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: services/strategy-engine/go.sum
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install Python dependencies
        run: pip install -r services/strategy-engine/requirements.txt
      - name: Run tests
        run: cd services/strategy-engine && go test -v -race -coverprofile=coverage.out ./...
      - name: Build
        run: cd services/strategy-engine && go build -v -o bin/strategy-engine ./cmd/server

  test-account-monitor:
    name: Test - Account Monitor Service
    needs: changes
    if: needs.changes.outputs.account-monitor == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: services/account-monitor/go.sum
      - name: Run tests
        run: cd services/account-monitor && go test -v -race -coverprofile=coverage.out ./...
      - name: Build
        run: cd services/account-monitor && go build -v -o bin/account-monitor ./cmd/server

  test-dashboard-server:
    name: Test - Dashboard Server Service
    needs: changes
    if: needs.changes.outputs.dashboard-server == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: services/dashboard-server/go.sum
      - name: Run tests
        run: cd services/dashboard-server && go test -v -race -coverprofile=coverage.out ./...
      - name: Build
        run: cd services/dashboard-server && go build -v -o bin/dashboard-server ./cmd/server

  test-risk-manager:
    name: Test - Risk Manager Service
    needs: changes
    if: needs.changes.outputs.risk-manager == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: services/risk-manager/go.sum
      - name: Run tests
        run: cd services/risk-manager && go test -v -race -coverprofile=coverage.out ./...
      - name: Build
        run: cd services/risk-manager && go build -v -o bin/risk-manager ./cmd/server

  test-configuration:
    name: Test - Configuration Service
    needs: changes
    if: needs.changes.outputs.configuration == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: services/configuration/go.sum
      - name: Run tests
        run: cd services/configuration && go test -v -race -coverprofile=coverage.out ./...
      - name: Build
        run: cd services/configuration && go build -v -o bin/configuration ./cmd/server

  # ============================================
  # Node.js Services
  # ============================================
  test-api-gateway:
    name: Test - API Gateway Service
    needs: changes
    if: needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/api-gateway/package-lock.json
      - name: Install dependencies
        run: cd services/api-gateway && npm ci
      - name: Lint
        run: cd services/api-gateway && npm run lint
      - name: Run tests
        run: cd services/api-gateway && npm test
      - name: Build
        run: cd services/api-gateway && npm run build

  test-auth:
    name: Test - Auth Service
    needs: changes
    if: needs.changes.outputs.auth == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/auth/package-lock.json
      - name: Install dependencies
        run: cd services/auth && npm ci
      - name: Lint
        run: cd services/auth && npm run lint
      - name: Run tests
        run: cd services/auth && npm test
      - name: Build
        run: cd services/auth && npm run build

  # ============================================
  # UI Services
  # ============================================
  test-terminal-ui:
    name: Test - Terminal UI
    needs: changes
    if: needs.changes.outputs.terminal-ui == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ui/terminal
      - name: Run tests
        run: cd ui/terminal && cargo test
      - name: Build
        run: cd ui/terminal && cargo build --release

  test-web-dashboard:
    name: Test - Web Dashboard
    needs: changes
    if: needs.changes.outputs.web-dashboard == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/web/package-lock.json
      - name: Install dependencies
        run: cd ui/web && npm ci
      - name: Lint
        run: cd ui/web && npm run lint
      - name: Type check
        run: cd ui/web && npm run type-check
      - name: Run tests
        run: cd ui/web && npm run test
      - name: Build
        run: cd ui/web && npm run build

  # ============================================
  # Integration Tests
  # ============================================
  integration-tests:
    name: Integration Tests
    needs: changes
    if: |
      needs.changes.outputs.market-data == 'true' ||
      needs.changes.outputs.order-execution == 'true' ||
      needs.changes.outputs.strategy-engine == 'true' ||
      needs.changes.outputs.account-monitor == 'true' ||
      needs.changes.outputs.dashboard-server == 'true' ||
      needs.changes.outputs.docker == 'true' ||
      needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: b25_test
          POSTGRES_USER: b25
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Start NATS
        run: docker run -d -p 4222:4222 nats:latest -js
      - name: Wait for services
        run: sleep 10
      - name: Run integration tests
        run: |
          if [ -f ./scripts/test-integration.sh ]; then
            ./scripts/test-integration.sh
          else
            echo "Integration test script not found, skipping"
          fi

  # ============================================
  # Docker Build & Push
  # ============================================
  docker-build:
    name: Build Docker Images
    needs:
      - changes
      - test-market-data
      - test-order-execution
      - test-strategy-engine
      - test-account-monitor
      - test-dashboard-server
      - test-risk-manager
      - test-configuration
      - test-api-gateway
      - test-auth
      - test-web-dashboard
    if: |
      always() &&
      (needs.test-market-data.result == 'success' || needs.test-market-data.result == 'skipped') &&
      (needs.test-order-execution.result == 'success' || needs.test-order-execution.result == 'skipped') &&
      (needs.test-strategy-engine.result == 'success' || needs.test-strategy-engine.result == 'skipped') &&
      (needs.test-account-monitor.result == 'success' || needs.test-account-monitor.result == 'skipped') &&
      (needs.test-dashboard-server.result == 'success' || needs.test-dashboard-server.result == 'skipped') &&
      (needs.test-risk-manager.result == 'success' || needs.test-risk-manager.result == 'skipped') &&
      (needs.test-configuration.result == 'success' || needs.test-configuration.result == 'skipped') &&
      (needs.test-api-gateway.result == 'success' || needs.test-api-gateway.result == 'skipped') &&
      (needs.test-auth.result == 'success' || needs.test-auth.result == 'skipped') &&
      (needs.test-web-dashboard.result == 'success' || needs.test-web-dashboard.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - market-data
          - order-execution
          - strategy-engine
          - account-monitor
          - dashboard-server
          - risk-manager
          - configuration
          - api-gateway
          - auth
          - web-dashboard
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/b25-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Determine context path
        id: context
        run: |
          if [[ "${{ matrix.service }}" == "web-dashboard" ]]; then
            echo "path=ui/web" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "terminal-ui" ]]; then
            echo "path=ui/terminal" >> $GITHUB_OUTPUT
          else
            echo "path=services/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

  # ============================================
  # Security Scanning
  # ============================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # All Checks Passed
  # ============================================
  ci-success:
    name: CI Success
    needs:
      - test-market-data
      - test-order-execution
      - test-strategy-engine
      - test-account-monitor
      - test-dashboard-server
      - test-risk-manager
      - test-configuration
      - test-api-gateway
      - test-auth
      - test-terminal-ui
      - test-web-dashboard
      - integration-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All jobs passed or were skipped"
