version: '3.8'

# Production Docker Compose Configuration
# Deploy: docker-compose -f docker/docker-compose.prod.yml up -d

services:
  # ============================================
  # Infrastructure Services
  # ============================================

  redis:
    image: redis:7-alpine
    container_name: b25-redis-prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  postgres:
    image: postgres:15-alpine
    container_name: b25-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-b25_config}
      POSTGRES_USER: ${POSTGRES_USER:-b25}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-b25}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: b25-timescaledb-prod
    environment:
      POSTGRES_DB: ${TIMESCALEDB_NAME:-b25_timeseries}
      POSTGRES_USER: ${TIMESCALEDB_USER:-b25}
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALEDB_USER:-b25}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  nats:
    image: nats:latest
    container_name: b25-nats-prod
    command: >
      -js
      -m 8222
      --store_dir /data
      --max_payload 8MB
      --max_pending 256MB
      --cluster_name b25-cluster
    volumes:
      - nats-data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # ============================================
  # Observability Services
  # ============================================

  prometheus:
    image: prom/prometheus:latest
    container_name: b25-prometheus-prod
    volumes:
      - ../services/metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=50GB'
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  grafana:
    image: grafana/grafana:latest
    container_name: b25-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    volumes:
      - ../services/metrics/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - b25-network
    restart: always

  alertmanager:
    image: prom/alertmanager:latest
    container_name: b25-alertmanager-prod
    volumes:
      - ../services/metrics/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - b25-network
    restart: always

  # ============================================
  # Core Trading Services
  # ============================================

  market-data:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-market-data:${VERSION:-latest}
    container_name: b25-market-data-prod
    environment:
      - RUST_LOG=info,market_data=info
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - METRICS_PORT=9100
      - GRPC_PORT=50051
      - HTTP_PORT=8080
    volumes:
      - ../services/market-data/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  order-execution:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-order-execution:${VERSION:-latest}
    container_name: b25-order-execution-prod
    environment:
      - LOG_LEVEL=info
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_URL=postgres://${POSTGRES_USER:-b25}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-b25_config}?sslmode=require
      - GRPC_PORT=50052
      - HTTP_PORT=8081
      - METRICS_PORT=9101
    volumes:
      - ../services/order-execution/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      market-data:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  strategy-engine:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-strategy-engine:${VERSION:-latest}
    container_name: b25-strategy-engine-prod
    environment:
      - LOG_LEVEL=info
      - NATS_URL=nats://nats:4222
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - POSTGRES_URL=postgres://${POSTGRES_USER:-b25}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-b25_config}?sslmode=require
      - GRPC_PORT=50053
      - HTTP_PORT=8082
      - METRICS_PORT=9102
      - PYTHON_PATH=/app/strategies
    volumes:
      - ../services/strategy-engine/config/prod.yml:/app/config/config.yml:ro
      - strategy-data:/app/strategies:ro
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      market-data:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  risk-manager:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-risk-manager:${VERSION:-latest}
    container_name: b25-risk-manager-prod
    environment:
      - LOG_LEVEL=info
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - POSTGRES_URL=postgres://${POSTGRES_USER:-b25}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-b25_config}?sslmode=require
      - GRPC_PORT=50054
      - HTTP_PORT=8083
      - METRICS_PORT=9103
    volumes:
      - ../services/risk-manager/config/prod.yml:/app/config/config.yml:ro
      - risk-plugins:/app/plugins:ro
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      order-execution:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  account-monitor:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-account-monitor:${VERSION:-latest}
    container_name: b25-account-monitor-prod
    environment:
      - LOG_LEVEL=info
      - TIMESCALEDB_URL=postgres://${TIMESCALEDB_USER:-b25}:${TIMESCALEDB_PASSWORD}@timescaledb:5432/${TIMESCALEDB_NAME:-b25_timeseries}?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - GRPC_PORT=50055
      - HTTP_PORT=8084
      - METRICS_PORT=9104
    volumes:
      - ../services/account-monitor/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  configuration:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-configuration:${VERSION:-latest}
    container_name: b25-configuration-prod
    environment:
      - LOG_LEVEL=info
      - POSTGRES_URL=postgres://${POSTGRES_USER:-b25}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-b25_config}?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - GRPC_PORT=50056
      - HTTP_PORT=8085
      - METRICS_PORT=9105
    volumes:
      - ../services/configuration/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  dashboard-server:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-dashboard-server:${VERSION:-latest}
    container_name: b25-dashboard-server-prod
    environment:
      - LOG_LEVEL=info
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - HTTP_PORT=8086
      - METRICS_PORT=9106
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ../services/dashboard-server/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      market-data:
        condition: service_healthy
      order-execution:
        condition: service_healthy
      account-monitor:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ============================================
  # API Gateway & Auth Services
  # ============================================

  api-gateway:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-api-gateway:${VERSION:-latest}
    container_name: b25-api-gateway-prod
    environment:
      - NODE_ENV=production
      - PORT=8000
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NATS_URL=nats://nats:4222
      - MARKET_DATA_URL=http://market-data:8080
      - ORDER_EXECUTION_URL=http://order-execution:8081
      - STRATEGY_ENGINE_URL=http://strategy-engine:8082
      - RISK_MANAGER_URL=http://risk-manager:8083
      - ACCOUNT_MONITOR_URL=http://account-monitor:8084
      - CONFIGURATION_URL=http://configuration:8085
      - DASHBOARD_SERVER_URL=http://dashboard-server:8086
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=60000
    volumes:
      - ../services/api-gateway/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      market-data:
        condition: service_healthy
      order-execution:
        condition: service_healthy
      strategy-engine:
        condition: service_healthy
      dashboard-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  auth:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-auth:${VERSION:-latest}
    container_name: b25-auth-prod
    environment:
      - NODE_ENV=production
      - PORT=8001
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-b25}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-b25_config}?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=24h
      - BCRYPT_ROUNDS=12
    volumes:
      - ../services/auth/config/prod.yml:/app/config/config.yml:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================
  # UI Services
  # ============================================

  web-dashboard:
    image: ${DOCKER_REGISTRY:-ghcr.io/yourorg}/b25-web-dashboard:${VERSION:-latest}
    container_name: b25-web-dashboard-prod
    environment:
      - VITE_API_URL=${API_URL}
      - VITE_WS_URL=${WS_URL}
    depends_on:
      api-gateway:
        condition: service_healthy
      dashboard-server:
        condition: service_healthy
    networks:
      - b25-network
    restart: always

  # ============================================
  # Reverse Proxy (Nginx)
  # ============================================

  nginx:
    image: nginx:alpine
    container_name: b25-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - web-dashboard
      - grafana
    networks:
      - b25-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

networks:
  b25-network:
    driver: bridge
    name: b25-network-prod

volumes:
  redis-data:
    name: b25-redis-data-prod
  postgres-data:
    name: b25-postgres-data-prod
  timescaledb-data:
    name: b25-timescaledb-data-prod
  nats-data:
    name: b25-nats-data-prod
  prometheus-data:
    name: b25-prometheus-data-prod
  grafana-data:
    name: b25-grafana-data-prod
  alertmanager-data:
    name: b25-alertmanager-data-prod
  strategy-data:
    name: b25-strategy-data-prod
  risk-plugins:
    name: b25-risk-plugins-prod
